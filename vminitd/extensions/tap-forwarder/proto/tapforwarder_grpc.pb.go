// Arca TAP Forwarder Control Plane Protocol
// gRPC API for dynamic network interface management in containers

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/tapforwarder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TAPForwarder_AttachNetwork_FullMethodName     = "/arca.tapforwarder.v1.TAPForwarder/AttachNetwork"
	TAPForwarder_DetachNetwork_FullMethodName     = "/arca.tapforwarder.v1.TAPForwarder/DetachNetwork"
	TAPForwarder_ListNetworks_FullMethodName      = "/arca.tapforwarder.v1.TAPForwarder/ListNetworks"
	TAPForwarder_GetStatus_FullMethodName         = "/arca.tapforwarder.v1.TAPForwarder/GetStatus"
	TAPForwarder_UpdateDNSMappings_FullMethodName = "/arca.tapforwarder.v1.TAPForwarder/UpdateDNSMappings"
)

// TAPForwarderClient is the client API for TAPForwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TAPForwarder service manages TAP network devices and packet forwarding
// Runs on vsock port 5555 in container's init system namespace
type TAPForwarderClient interface {
	// Attach container to a network by creating a TAP device and starting forwarding
	AttachNetwork(ctx context.Context, in *AttachNetworkRequest, opts ...grpc.CallOption) (*AttachNetworkResponse, error)
	// Detach container from a network by stopping forwarding and destroying TAP device
	DetachNetwork(ctx context.Context, in *DetachNetworkRequest, opts ...grpc.CallOption) (*DetachNetworkResponse, error)
	// List all currently attached networks
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// Get status and statistics for the TAP forwarder
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Update DNS mappings for network topology changes
	// Called by Arca daemon when containers join/leave networks
	UpdateDNSMappings(ctx context.Context, in *UpdateDNSMappingsRequest, opts ...grpc.CallOption) (*UpdateDNSMappingsResponse, error)
}

type tAPForwarderClient struct {
	cc grpc.ClientConnInterface
}

func NewTAPForwarderClient(cc grpc.ClientConnInterface) TAPForwarderClient {
	return &tAPForwarderClient{cc}
}

func (c *tAPForwarderClient) AttachNetwork(ctx context.Context, in *AttachNetworkRequest, opts ...grpc.CallOption) (*AttachNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachNetworkResponse)
	err := c.cc.Invoke(ctx, TAPForwarder_AttachNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAPForwarderClient) DetachNetwork(ctx context.Context, in *DetachNetworkRequest, opts ...grpc.CallOption) (*DetachNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachNetworkResponse)
	err := c.cc.Invoke(ctx, TAPForwarder_DetachNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAPForwarderClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, TAPForwarder_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAPForwarderClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, TAPForwarder_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAPForwarderClient) UpdateDNSMappings(ctx context.Context, in *UpdateDNSMappingsRequest, opts ...grpc.CallOption) (*UpdateDNSMappingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDNSMappingsResponse)
	err := c.cc.Invoke(ctx, TAPForwarder_UpdateDNSMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TAPForwarderServer is the server API for TAPForwarder service.
// All implementations must embed UnimplementedTAPForwarderServer
// for forward compatibility.
//
// TAPForwarder service manages TAP network devices and packet forwarding
// Runs on vsock port 5555 in container's init system namespace
type TAPForwarderServer interface {
	// Attach container to a network by creating a TAP device and starting forwarding
	AttachNetwork(context.Context, *AttachNetworkRequest) (*AttachNetworkResponse, error)
	// Detach container from a network by stopping forwarding and destroying TAP device
	DetachNetwork(context.Context, *DetachNetworkRequest) (*DetachNetworkResponse, error)
	// List all currently attached networks
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// Get status and statistics for the TAP forwarder
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Update DNS mappings for network topology changes
	// Called by Arca daemon when containers join/leave networks
	UpdateDNSMappings(context.Context, *UpdateDNSMappingsRequest) (*UpdateDNSMappingsResponse, error)
	mustEmbedUnimplementedTAPForwarderServer()
}

// UnimplementedTAPForwarderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTAPForwarderServer struct{}

func (UnimplementedTAPForwarderServer) AttachNetwork(context.Context, *AttachNetworkRequest) (*AttachNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachNetwork not implemented")
}
func (UnimplementedTAPForwarderServer) DetachNetwork(context.Context, *DetachNetworkRequest) (*DetachNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNetwork not implemented")
}
func (UnimplementedTAPForwarderServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedTAPForwarderServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTAPForwarderServer) UpdateDNSMappings(context.Context, *UpdateDNSMappingsRequest) (*UpdateDNSMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDNSMappings not implemented")
}
func (UnimplementedTAPForwarderServer) mustEmbedUnimplementedTAPForwarderServer() {}
func (UnimplementedTAPForwarderServer) testEmbeddedByValue()                      {}

// UnsafeTAPForwarderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TAPForwarderServer will
// result in compilation errors.
type UnsafeTAPForwarderServer interface {
	mustEmbedUnimplementedTAPForwarderServer()
}

func RegisterTAPForwarderServer(s grpc.ServiceRegistrar, srv TAPForwarderServer) {
	// If the following call pancis, it indicates UnimplementedTAPForwarderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TAPForwarder_ServiceDesc, srv)
}

func _TAPForwarder_AttachNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAPForwarderServer).AttachNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TAPForwarder_AttachNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAPForwarderServer).AttachNetwork(ctx, req.(*AttachNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAPForwarder_DetachNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAPForwarderServer).DetachNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TAPForwarder_DetachNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAPForwarderServer).DetachNetwork(ctx, req.(*DetachNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAPForwarder_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAPForwarderServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TAPForwarder_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAPForwarderServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAPForwarder_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAPForwarderServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TAPForwarder_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAPForwarderServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAPForwarder_UpdateDNSMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAPForwarderServer).UpdateDNSMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TAPForwarder_UpdateDNSMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAPForwarderServer).UpdateDNSMappings(ctx, req.(*UpdateDNSMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TAPForwarder_ServiceDesc is the grpc.ServiceDesc for TAPForwarder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TAPForwarder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arca.tapforwarder.v1.TAPForwarder",
	HandlerType: (*TAPForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachNetwork",
			Handler:    _TAPForwarder_AttachNetwork_Handler,
		},
		{
			MethodName: "DetachNetwork",
			Handler:    _TAPForwarder_DetachNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _TAPForwarder_ListNetworks_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TAPForwarder_GetStatus_Handler,
		},
		{
			MethodName: "UpdateDNSMappings",
			Handler:    _TAPForwarder_UpdateDNSMappings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tapforwarder.proto",
}
