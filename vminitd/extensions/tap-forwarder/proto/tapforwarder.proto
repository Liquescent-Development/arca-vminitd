// Arca TAP Forwarder Control Plane Protocol
// gRPC API for dynamic network interface management in containers

syntax = "proto3";

package arca.tapforwarder.v1;

option go_package = "github.com/vas-solutus/arca-tap-forwarder/proto";

// TAPForwarder service manages TAP network devices and packet forwarding
// Runs on vsock port 5555 in container's init system namespace
service TAPForwarder {
    // Attach container to a network by creating a TAP device and starting forwarding
    rpc AttachNetwork(AttachNetworkRequest) returns (AttachNetworkResponse);

    // Detach container from a network by stopping forwarding and destroying TAP device
    rpc DetachNetwork(DetachNetworkRequest) returns (DetachNetworkResponse);

    // List all currently attached networks
    rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);

    // Get status and statistics for the TAP forwarder
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);

    // Update DNS mappings for network topology changes
    // Called by Arca daemon when containers join/leave networks
    rpc UpdateDNSMappings(UpdateDNSMappingsRequest) returns (UpdateDNSMappingsResponse);
}

// Request to attach container to a network
message AttachNetworkRequest {
    // Network interface name (e.g., "eth0", "eth1")
    string device = 1;

    // vsock port for data plane (packet forwarding)
    uint32 vsock_port = 2;

    // IP address to assign to this interface (e.g., "172.18.0.2")
    string ip_address = 3;

    // Network gateway IP (e.g., "172.18.0.1")
    string gateway = 4;

    // Network mask in CIDR notation (e.g., 24 for /24)
    // If not specified, defaults to /24
    uint32 netmask = 5;
}

message AttachNetworkResponse {
    // Success status
    bool success = 1;

    // Error message if success = false
    string error = 2;

    // MAC address assigned to the interface
    string mac_address = 3;
}

// Request to detach container from a network
message DetachNetworkRequest {
    // Network interface name to remove (e.g., "eth0")
    string device = 1;
}

message DetachNetworkResponse {
    // Success status
    bool success = 1;

    // Error message if success = false
    string error = 2;
}

// Request to list all attached networks
message ListNetworksRequest {
    // No parameters needed
}

message ListNetworksResponse {
    repeated NetworkInfo networks = 1;
}

message NetworkInfo {
    // Interface name
    string device = 1;

    // IP address
    string ip_address = 2;

    // Gateway
    string gateway = 3;

    // vsock port for data plane
    uint32 vsock_port = 4;

    // MAC address
    string mac_address = 5;

    // Packet statistics
    PacketStats stats = 6;
}

message PacketStats {
    // Packets sent (TAP -> vsock)
    uint64 packets_sent = 1;

    // Packets received (vsock -> TAP)
    uint64 packets_received = 2;

    // Bytes sent
    uint64 bytes_sent = 3;

    // Bytes received
    uint64 bytes_received = 4;

    // Send errors
    uint64 send_errors = 5;

    // Receive errors
    uint64 receive_errors = 6;
}

// Request forwarder status
message GetStatusRequest {
    // No parameters needed
}

message GetStatusResponse {
    // Forwarder version
    string version = 1;

    // Number of active network interfaces
    uint32 active_networks = 2;

    // Uptime in seconds
    uint64 uptime_seconds = 3;

    // Overall packet statistics
    PacketStats total_stats = 4;
}

// Request to update DNS mappings for network topology
message UpdateDNSMappingsRequest {
    // Complete network topology for this container
    // Maps network name -> list of containers on that network
    map<string, NetworkPeers> networks = 1;
}

message NetworkPeers {
    // Containers on this network
    repeated ContainerDNSInfo containers = 1;
}

message ContainerDNSInfo {
    // Container name (for DNS resolution)
    string name = 1;

    // Container ID (64-char Docker ID)
    string id = 2;

    // IP address on this network
    string ip_address = 3;

    // Hostname aliases
    repeated string aliases = 4;
}

message UpdateDNSMappingsResponse {
    // Success status
    bool success = 1;

    // Error message if success = false
    string error = 2;

    // Number of DNS records updated
    uint32 records_updated = 3;
}
