//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/tapforwarder.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// TAPForwarder service manages TAP network devices and packet forwarding
/// Runs on vsock port 5555 in container's init system namespace
///
/// Usage: instantiate `Arca_Tapforwarder_V1_TAPForwarderClient`, then call methods of this protocol to make API calls.
internal protocol Arca_Tapforwarder_V1_TAPForwarderClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? { get }

  func attachNetwork(
    _ request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse>

  func detachNetwork(
    _ request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse>

  func listNetworks(
    _ request: Arca_Tapforwarder_V1_ListNetworksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse>

  func getStatus(
    _ request: Arca_Tapforwarder_V1_GetStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse>

  func updateDNSMappings(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>
}

extension Arca_Tapforwarder_V1_TAPForwarderClientProtocol {
  internal var serviceName: String {
    return "arca.tapforwarder.v1.TAPForwarder"
  }

  /// Attach container to a network by creating a TAP device and starting forwarding
  ///
  /// - Parameters:
  ///   - request: Request to send to AttachNetwork.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func attachNetwork(
    _ request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse> {
    return self.makeUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.attachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAttachNetworkInterceptors() ?? []
    )
  }

  /// Detach container from a network by stopping forwarding and destroying TAP device
  ///
  /// - Parameters:
  ///   - request: Request to send to DetachNetwork.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func detachNetwork(
    _ request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse> {
    return self.makeUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.detachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachNetworkInterceptors() ?? []
    )
  }

  /// List all currently attached networks
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNetworks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listNetworks(
    _ request: Arca_Tapforwarder_V1_ListNetworksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse> {
    return self.makeUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.listNetworks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNetworksInterceptors() ?? []
    )
  }

  /// Get status and statistics for the TAP forwarder
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getStatus(
    _ request: Arca_Tapforwarder_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse> {
    return self.makeUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  /// Update DNS mappings for network topology changes
  /// Called by Arca daemon when containers join/leave networks
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDNSMappings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDNSMappings(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse> {
    return self.makeUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.updateDNSMappings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDNSMappingsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Arca_Tapforwarder_V1_TAPForwarderClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Arca_Tapforwarder_V1_TAPForwarderNIOClient")
internal final class Arca_Tapforwarder_V1_TAPForwarderClient: Arca_Tapforwarder_V1_TAPForwarderClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the arca.tapforwarder.v1.TAPForwarder service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Arca_Tapforwarder_V1_TAPForwarderNIOClient: Arca_Tapforwarder_V1_TAPForwarderClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol?

  /// Creates a client for the arca.tapforwarder.v1.TAPForwarder service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// TAPForwarder service manages TAP network devices and packet forwarding
/// Runs on vsock port 5555 in container's init system namespace
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Arca_Tapforwarder_V1_TAPForwarderAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? { get }

  func makeAttachNetworkCall(
    _ request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse>

  func makeDetachNetworkCall(
    _ request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse>

  func makeListNetworksCall(
    _ request: Arca_Tapforwarder_V1_ListNetworksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse>

  func makeGetStatusCall(
    _ request: Arca_Tapforwarder_V1_GetStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse>

  func makeUpdateDnsmappingsCall(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Arca_Tapforwarder_V1_TAPForwarderAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Arca_Tapforwarder_V1_TAPForwarderClientMetadata.serviceDescriptor
  }

  internal var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAttachNetworkCall(
    _ request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse> {
    return self.makeAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.attachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAttachNetworkInterceptors() ?? []
    )
  }

  internal func makeDetachNetworkCall(
    _ request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse> {
    return self.makeAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.detachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachNetworkInterceptors() ?? []
    )
  }

  internal func makeListNetworksCall(
    _ request: Arca_Tapforwarder_V1_ListNetworksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse> {
    return self.makeAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.listNetworks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNetworksInterceptors() ?? []
    )
  }

  internal func makeGetStatusCall(
    _ request: Arca_Tapforwarder_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  internal func makeUpdateDnsmappingsCall(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.updateDNSMappings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDNSMappingsInterceptors() ?? []
    )
  }

  internal func makeUpdateDNSMappingsCall(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse> {
    return self.makeUpdateDnsmappingsCall(
      request,
      callOptions: callOptions
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Arca_Tapforwarder_V1_TAPForwarderAsyncClientProtocol {
  internal func attachNetwork(
    _ request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Arca_Tapforwarder_V1_AttachNetworkResponse {
    return try await self.performAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.attachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAttachNetworkInterceptors() ?? []
    )
  }

  internal func detachNetwork(
    _ request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Arca_Tapforwarder_V1_DetachNetworkResponse {
    return try await self.performAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.detachNetwork.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachNetworkInterceptors() ?? []
    )
  }

  internal func listNetworks(
    _ request: Arca_Tapforwarder_V1_ListNetworksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Arca_Tapforwarder_V1_ListNetworksResponse {
    return try await self.performAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.listNetworks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNetworksInterceptors() ?? []
    )
  }

  internal func getStatus(
    _ request: Arca_Tapforwarder_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Arca_Tapforwarder_V1_GetStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  internal func updateDNSMappings(
    _ request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Arca_Tapforwarder_V1_UpdateDNSMappingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.updateDNSMappings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDNSMappingsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Arca_Tapforwarder_V1_TAPForwarderAsyncClient: Arca_Tapforwarder_V1_TAPForwarderAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Arca_Tapforwarder_V1_TAPForwarderClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'attachNetwork'.
  func makeAttachNetworkInterceptors() -> [ClientInterceptor<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse>]

  /// - Returns: Interceptors to use when invoking 'detachNetwork'.
  func makeDetachNetworkInterceptors() -> [ClientInterceptor<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse>]

  /// - Returns: Interceptors to use when invoking 'listNetworks'.
  func makeListNetworksInterceptors() -> [ClientInterceptor<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse>]

  /// - Returns: Interceptors to use when invoking 'getStatus'.
  func makeGetStatusInterceptors() -> [ClientInterceptor<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDNSMappings'.
  func makeUpdateDNSMappingsInterceptors() -> [ClientInterceptor<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>]
}

internal enum Arca_Tapforwarder_V1_TAPForwarderClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TAPForwarder",
    fullName: "arca.tapforwarder.v1.TAPForwarder",
    methods: [
      Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.attachNetwork,
      Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.detachNetwork,
      Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.listNetworks,
      Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.getStatus,
      Arca_Tapforwarder_V1_TAPForwarderClientMetadata.Methods.updateDNSMappings,
    ]
  )

  internal enum Methods {
    internal static let attachNetwork = GRPCMethodDescriptor(
      name: "AttachNetwork",
      path: "/arca.tapforwarder.v1.TAPForwarder/AttachNetwork",
      type: GRPCCallType.unary
    )

    internal static let detachNetwork = GRPCMethodDescriptor(
      name: "DetachNetwork",
      path: "/arca.tapforwarder.v1.TAPForwarder/DetachNetwork",
      type: GRPCCallType.unary
    )

    internal static let listNetworks = GRPCMethodDescriptor(
      name: "ListNetworks",
      path: "/arca.tapforwarder.v1.TAPForwarder/ListNetworks",
      type: GRPCCallType.unary
    )

    internal static let getStatus = GRPCMethodDescriptor(
      name: "GetStatus",
      path: "/arca.tapforwarder.v1.TAPForwarder/GetStatus",
      type: GRPCCallType.unary
    )

    internal static let updateDNSMappings = GRPCMethodDescriptor(
      name: "UpdateDNSMappings",
      path: "/arca.tapforwarder.v1.TAPForwarder/UpdateDNSMappings",
      type: GRPCCallType.unary
    )
  }
}

/// TAPForwarder service manages TAP network devices and packet forwarding
/// Runs on vsock port 5555 in container's init system namespace
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Arca_Tapforwarder_V1_TAPForwarderProvider: CallHandlerProvider {
  var interceptors: Arca_Tapforwarder_V1_TAPForwarderServerInterceptorFactoryProtocol? { get }

  /// Attach container to a network by creating a TAP device and starting forwarding
  func attachNetwork(request: Arca_Tapforwarder_V1_AttachNetworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Arca_Tapforwarder_V1_AttachNetworkResponse>

  /// Detach container from a network by stopping forwarding and destroying TAP device
  func detachNetwork(request: Arca_Tapforwarder_V1_DetachNetworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Arca_Tapforwarder_V1_DetachNetworkResponse>

  /// List all currently attached networks
  func listNetworks(request: Arca_Tapforwarder_V1_ListNetworksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Arca_Tapforwarder_V1_ListNetworksResponse>

  /// Get status and statistics for the TAP forwarder
  func getStatus(request: Arca_Tapforwarder_V1_GetStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Arca_Tapforwarder_V1_GetStatusResponse>

  /// Update DNS mappings for network topology changes
  /// Called by Arca daemon when containers join/leave networks
  func updateDNSMappings(request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>
}

extension Arca_Tapforwarder_V1_TAPForwarderProvider {
  internal var serviceName: Substring {
    return Arca_Tapforwarder_V1_TAPForwarderServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AttachNetwork":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_AttachNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_AttachNetworkResponse>(),
        interceptors: self.interceptors?.makeAttachNetworkInterceptors() ?? [],
        userFunction: self.attachNetwork(request:context:)
      )

    case "DetachNetwork":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_DetachNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_DetachNetworkResponse>(),
        interceptors: self.interceptors?.makeDetachNetworkInterceptors() ?? [],
        userFunction: self.detachNetwork(request:context:)
      )

    case "ListNetworks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_ListNetworksRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_ListNetworksResponse>(),
        interceptors: self.interceptors?.makeListNetworksInterceptors() ?? [],
        userFunction: self.listNetworks(request:context:)
      )

    case "GetStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        userFunction: self.getStatus(request:context:)
      )

    case "UpdateDNSMappings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>(),
        interceptors: self.interceptors?.makeUpdateDNSMappingsInterceptors() ?? [],
        userFunction: self.updateDNSMappings(request:context:)
      )

    default:
      return nil
    }
  }
}

/// TAPForwarder service manages TAP network devices and packet forwarding
/// Runs on vsock port 5555 in container's init system namespace
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Arca_Tapforwarder_V1_TAPForwarderAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Arca_Tapforwarder_V1_TAPForwarderServerInterceptorFactoryProtocol? { get }

  /// Attach container to a network by creating a TAP device and starting forwarding
  func attachNetwork(
    request: Arca_Tapforwarder_V1_AttachNetworkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Arca_Tapforwarder_V1_AttachNetworkResponse

  /// Detach container from a network by stopping forwarding and destroying TAP device
  func detachNetwork(
    request: Arca_Tapforwarder_V1_DetachNetworkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Arca_Tapforwarder_V1_DetachNetworkResponse

  /// List all currently attached networks
  func listNetworks(
    request: Arca_Tapforwarder_V1_ListNetworksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Arca_Tapforwarder_V1_ListNetworksResponse

  /// Get status and statistics for the TAP forwarder
  func getStatus(
    request: Arca_Tapforwarder_V1_GetStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Arca_Tapforwarder_V1_GetStatusResponse

  /// Update DNS mappings for network topology changes
  /// Called by Arca daemon when containers join/leave networks
  func updateDNSMappings(
    request: Arca_Tapforwarder_V1_UpdateDNSMappingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Arca_Tapforwarder_V1_UpdateDNSMappingsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Arca_Tapforwarder_V1_TAPForwarderAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Arca_Tapforwarder_V1_TAPForwarderServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Arca_Tapforwarder_V1_TAPForwarderServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Arca_Tapforwarder_V1_TAPForwarderServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AttachNetwork":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_AttachNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_AttachNetworkResponse>(),
        interceptors: self.interceptors?.makeAttachNetworkInterceptors() ?? [],
        wrapping: { try await self.attachNetwork(request: $0, context: $1) }
      )

    case "DetachNetwork":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_DetachNetworkRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_DetachNetworkResponse>(),
        interceptors: self.interceptors?.makeDetachNetworkInterceptors() ?? [],
        wrapping: { try await self.detachNetwork(request: $0, context: $1) }
      )

    case "ListNetworks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_ListNetworksRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_ListNetworksResponse>(),
        interceptors: self.interceptors?.makeListNetworksInterceptors() ?? [],
        wrapping: { try await self.listNetworks(request: $0, context: $1) }
      )

    case "GetStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        wrapping: { try await self.getStatus(request: $0, context: $1) }
      )

    case "UpdateDNSMappings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest>(),
        responseSerializer: ProtobufSerializer<Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>(),
        interceptors: self.interceptors?.makeUpdateDNSMappingsInterceptors() ?? [],
        wrapping: { try await self.updateDNSMappings(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Arca_Tapforwarder_V1_TAPForwarderServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'attachNetwork'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAttachNetworkInterceptors() -> [ServerInterceptor<Arca_Tapforwarder_V1_AttachNetworkRequest, Arca_Tapforwarder_V1_AttachNetworkResponse>]

  /// - Returns: Interceptors to use when handling 'detachNetwork'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDetachNetworkInterceptors() -> [ServerInterceptor<Arca_Tapforwarder_V1_DetachNetworkRequest, Arca_Tapforwarder_V1_DetachNetworkResponse>]

  /// - Returns: Interceptors to use when handling 'listNetworks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListNetworksInterceptors() -> [ServerInterceptor<Arca_Tapforwarder_V1_ListNetworksRequest, Arca_Tapforwarder_V1_ListNetworksResponse>]

  /// - Returns: Interceptors to use when handling 'getStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStatusInterceptors() -> [ServerInterceptor<Arca_Tapforwarder_V1_GetStatusRequest, Arca_Tapforwarder_V1_GetStatusResponse>]

  /// - Returns: Interceptors to use when handling 'updateDNSMappings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDNSMappingsInterceptors() -> [ServerInterceptor<Arca_Tapforwarder_V1_UpdateDNSMappingsRequest, Arca_Tapforwarder_V1_UpdateDNSMappingsResponse>]
}

internal enum Arca_Tapforwarder_V1_TAPForwarderServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TAPForwarder",
    fullName: "arca.tapforwarder.v1.TAPForwarder",
    methods: [
      Arca_Tapforwarder_V1_TAPForwarderServerMetadata.Methods.attachNetwork,
      Arca_Tapforwarder_V1_TAPForwarderServerMetadata.Methods.detachNetwork,
      Arca_Tapforwarder_V1_TAPForwarderServerMetadata.Methods.listNetworks,
      Arca_Tapforwarder_V1_TAPForwarderServerMetadata.Methods.getStatus,
      Arca_Tapforwarder_V1_TAPForwarderServerMetadata.Methods.updateDNSMappings,
    ]
  )

  internal enum Methods {
    internal static let attachNetwork = GRPCMethodDescriptor(
      name: "AttachNetwork",
      path: "/arca.tapforwarder.v1.TAPForwarder/AttachNetwork",
      type: GRPCCallType.unary
    )

    internal static let detachNetwork = GRPCMethodDescriptor(
      name: "DetachNetwork",
      path: "/arca.tapforwarder.v1.TAPForwarder/DetachNetwork",
      type: GRPCCallType.unary
    )

    internal static let listNetworks = GRPCMethodDescriptor(
      name: "ListNetworks",
      path: "/arca.tapforwarder.v1.TAPForwarder/ListNetworks",
      type: GRPCCallType.unary
    )

    internal static let getStatus = GRPCMethodDescriptor(
      name: "GetStatus",
      path: "/arca.tapforwarder.v1.TAPForwarder/GetStatus",
      type: GRPCCallType.unary
    )

    internal static let updateDNSMappings = GRPCMethodDescriptor(
      name: "UpdateDNSMappings",
      path: "/arca.tapforwarder.v1.TAPForwarder/UpdateDNSMappings",
      type: GRPCCallType.unary
    )
  }
}
