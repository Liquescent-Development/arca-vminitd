// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/network.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateVLANRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parent interface name (e.g., "eth0")
	ParentInterface string `protobuf:"bytes,1,opt,name=parent_interface,json=parentInterface,proto3" json:"parent_interface,omitempty"`
	// VLAN ID (1-4094)
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// IP address with CIDR notation (e.g., "172.18.0.5/16")
	// If empty, no IP is configured
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Gateway IP address (e.g., "172.18.0.1")
	// If empty, no default route is added
	Gateway string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Optional: Custom MAC address for the VLAN interface
	// If empty, inherits parent's MAC
	MacAddress string `protobuf:"bytes,5,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Optional: MTU for the VLAN interface
	// If 0, uses parent's MTU
	Mtu           uint32 `protobuf:"varint,6,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVLANRequest) Reset() {
	*x = CreateVLANRequest{}
	mi := &file_proto_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVLANRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVLANRequest) ProtoMessage() {}

func (x *CreateVLANRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVLANRequest.ProtoReflect.Descriptor instead.
func (*CreateVLANRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVLANRequest) GetParentInterface() string {
	if x != nil {
		return x.ParentInterface
	}
	return ""
}

func (x *CreateVLANRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *CreateVLANRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CreateVLANRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *CreateVLANRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CreateVLANRequest) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type CreateVLANResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Created interface name (e.g., "eth0.100")
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Error message if success = false
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Actual MAC address assigned
	MacAddress    string `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVLANResponse) Reset() {
	*x = CreateVLANResponse{}
	mi := &file_proto_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVLANResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVLANResponse) ProtoMessage() {}

func (x *CreateVLANResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVLANResponse.ProtoReflect.Descriptor instead.
func (*CreateVLANResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVLANResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateVLANResponse) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *CreateVLANResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CreateVLANResponse) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type DeleteVLANRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interface name to delete (e.g., "eth0.100")
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVLANRequest) Reset() {
	*x = DeleteVLANRequest{}
	mi := &file_proto_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVLANRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVLANRequest) ProtoMessage() {}

func (x *DeleteVLANRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVLANRequest.ProtoReflect.Descriptor instead.
func (*DeleteVLANRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteVLANRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type DeleteVLANResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if success = false
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVLANResponse) Reset() {
	*x = DeleteVLANResponse{}
	mi := &file_proto_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVLANResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVLANResponse) ProtoMessage() {}

func (x *DeleteVLANResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVLANResponse.ProtoReflect.Descriptor instead.
func (*DeleteVLANResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteVLANResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteVLANResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ConfigureIPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interface name (e.g., "eth0.100")
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// IP address with CIDR notation (e.g., "172.18.0.5/16")
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// If true, replaces all existing IPs on the interface
	// If false, adds to existing IPs
	Replace       bool `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureIPRequest) Reset() {
	*x = ConfigureIPRequest{}
	mi := &file_proto_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureIPRequest) ProtoMessage() {}

func (x *ConfigureIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureIPRequest.ProtoReflect.Descriptor instead.
func (*ConfigureIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigureIPRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *ConfigureIPRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ConfigureIPRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type ConfigureIPResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if success = false
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureIPResponse) Reset() {
	*x = ConfigureIPResponse{}
	mi := &file_proto_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureIPResponse) ProtoMessage() {}

func (x *ConfigureIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureIPResponse.ProtoReflect.Descriptor instead.
func (*ConfigureIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigureIPResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigureIPResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AddRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination network in CIDR notation (e.g., "0.0.0.0/0" for default route)
	// Empty string means default route
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Gateway IP address
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Interface name to route through (e.g., "eth0.100")
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Route metric/priority (lower = higher priority)
	// 0 = use system default
	Metric        uint32 `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRouteRequest) Reset() {
	*x = AddRouteRequest{}
	mi := &file_proto_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouteRequest) ProtoMessage() {}

func (x *AddRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouteRequest.ProtoReflect.Descriptor instead.
func (*AddRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{6}
}

func (x *AddRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *AddRouteRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AddRouteRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *AddRouteRequest) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

type AddRouteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if success = false
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRouteResponse) Reset() {
	*x = AddRouteResponse{}
	mi := &file_proto_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouteResponse) ProtoMessage() {}

func (x *AddRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouteResponse.ProtoReflect.Descriptor instead.
func (*AddRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{7}
}

func (x *AddRouteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddRouteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeleteRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination network in CIDR notation
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Gateway IP address (optional, for matching specific route)
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Interface name (optional, for matching specific route)
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	mi := &file_proto_network_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DeleteRouteRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeleteRouteRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type DeleteRouteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if success = false
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteResponse) Reset() {
	*x = DeleteRouteResponse{}
	mi := &file_proto_network_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteResponse) ProtoMessage() {}

func (x *DeleteRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRouteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteRouteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListInterfacesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Filter by interface name pattern
	NameFilter    string `protobuf:"bytes,1,opt,name=name_filter,json=nameFilter,proto3" json:"name_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInterfacesRequest) Reset() {
	*x = ListInterfacesRequest{}
	mi := &file_proto_network_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesRequest) ProtoMessage() {}

func (x *ListInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{10}
}

func (x *ListInterfacesRequest) GetNameFilter() string {
	if x != nil {
		return x.NameFilter
	}
	return ""
}

type ListInterfacesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of network interfaces
	Interfaces []*NetworkInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Error message if retrieval failed
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInterfacesResponse) Reset() {
	*x = ListInterfacesResponse{}
	mi := &file_proto_network_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesResponse) ProtoMessage() {}

func (x *ListInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{11}
}

func (x *ListInterfacesResponse) GetInterfaces() []*NetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *ListInterfacesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type NetworkInterface struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interface name (e.g., "eth0", "eth0.100")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Interface index
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// MTU
	Mtu uint32 `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// List of IP addresses (CIDR notation)
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// Interface state (up/down)
	IsUp bool `protobuf:"varint,6,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	// Parent interface for VLANs (empty if not a VLAN)
	Parent string `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	// VLAN ID (0 if not a VLAN)
	VlanId        uint32 `protobuf:"varint,8,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_proto_network_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_network_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_proto_network_proto_rawDescGZIP(), []int{12}
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *NetworkInterface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *NetworkInterface) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *NetworkInterface) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *NetworkInterface) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

var File_proto_network_proto protoreflect.FileDescriptor

const file_proto_network_proto_rawDesc = "" +
	"\n" +
	"\x13proto/network.proto\x12\x04vlan\"\xc3\x01\n" +
	"\x11CreateVLANRequest\x12)\n" +
	"\x10parent_interface\x18\x01 \x01(\tR\x0fparentInterface\x12\x17\n" +
	"\avlan_id\x18\x02 \x01(\rR\x06vlanId\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x03 \x01(\tR\tipAddress\x12\x18\n" +
	"\agateway\x18\x04 \x01(\tR\agateway\x12\x1f\n" +
	"\vmac_address\x18\x05 \x01(\tR\n" +
	"macAddress\x12\x10\n" +
	"\x03mtu\x18\x06 \x01(\rR\x03mtu\"\x8c\x01\n" +
	"\x12CreateVLANResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12%\n" +
	"\x0einterface_name\x18\x02 \x01(\tR\rinterfaceName\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x1f\n" +
	"\vmac_address\x18\x04 \x01(\tR\n" +
	"macAddress\":\n" +
	"\x11DeleteVLANRequest\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\"D\n" +
	"\x12DeleteVLANResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"t\n" +
	"\x12ConfigureIPRequest\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tR\tipAddress\x12\x18\n" +
	"\areplace\x18\x03 \x01(\bR\areplace\"E\n" +
	"\x13ConfigureIPResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x8c\x01\n" +
	"\x0fAddRouteRequest\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x18\n" +
	"\agateway\x18\x02 \x01(\tR\agateway\x12%\n" +
	"\x0einterface_name\x18\x03 \x01(\tR\rinterfaceName\x12\x16\n" +
	"\x06metric\x18\x04 \x01(\rR\x06metric\"B\n" +
	"\x10AddRouteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"w\n" +
	"\x12DeleteRouteRequest\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x18\n" +
	"\agateway\x18\x02 \x01(\tR\agateway\x12%\n" +
	"\x0einterface_name\x18\x03 \x01(\tR\rinterfaceName\"E\n" +
	"\x13DeleteRouteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"8\n" +
	"\x15ListInterfacesRequest\x12\x1f\n" +
	"\vname_filter\x18\x01 \x01(\tR\n" +
	"nameFilter\"f\n" +
	"\x16ListInterfacesResponse\x126\n" +
	"\n" +
	"interfaces\x18\x01 \x03(\v2\x16.vlan.NetworkInterfaceR\n" +
	"interfaces\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\xd8\x01\n" +
	"\x10NetworkInterface\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05index\x18\x02 \x01(\x05R\x05index\x12\x1f\n" +
	"\vmac_address\x18\x03 \x01(\tR\n" +
	"macAddress\x12\x10\n" +
	"\x03mtu\x18\x04 \x01(\rR\x03mtu\x12!\n" +
	"\fip_addresses\x18\x05 \x03(\tR\vipAddresses\x12\x13\n" +
	"\x05is_up\x18\x06 \x01(\bR\x04isUp\x12\x16\n" +
	"\x06parent\x18\a \x01(\tR\x06parent\x12\x17\n" +
	"\avlan_id\x18\b \x01(\rR\x06vlanId2\xa1\x03\n" +
	"\rNetworkConfig\x12?\n" +
	"\n" +
	"CreateVLAN\x12\x17.vlan.CreateVLANRequest\x1a\x18.vlan.CreateVLANResponse\x12?\n" +
	"\n" +
	"DeleteVLAN\x12\x17.vlan.DeleteVLANRequest\x1a\x18.vlan.DeleteVLANResponse\x12B\n" +
	"\vConfigureIP\x12\x18.vlan.ConfigureIPRequest\x1a\x19.vlan.ConfigureIPResponse\x129\n" +
	"\bAddRoute\x12\x15.vlan.AddRouteRequest\x1a\x16.vlan.AddRouteResponse\x12B\n" +
	"\vDeleteRoute\x12\x18.vlan.DeleteRouteRequest\x1a\x19.vlan.DeleteRouteResponse\x12K\n" +
	"\x0eListInterfaces\x12\x1b.vlan.ListInterfacesRequest\x1a\x1c.vlan.ListInterfacesResponseBVZTgithub.com/Liquescent-Development/arca-vminitd/vminitd/extensions/vlan-service/protob\x06proto3"

var (
	file_proto_network_proto_rawDescOnce sync.Once
	file_proto_network_proto_rawDescData []byte
)

func file_proto_network_proto_rawDescGZIP() []byte {
	file_proto_network_proto_rawDescOnce.Do(func() {
		file_proto_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_network_proto_rawDesc), len(file_proto_network_proto_rawDesc)))
	})
	return file_proto_network_proto_rawDescData
}

var file_proto_network_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_network_proto_goTypes = []any{
	(*CreateVLANRequest)(nil),      // 0: vlan.CreateVLANRequest
	(*CreateVLANResponse)(nil),     // 1: vlan.CreateVLANResponse
	(*DeleteVLANRequest)(nil),      // 2: vlan.DeleteVLANRequest
	(*DeleteVLANResponse)(nil),     // 3: vlan.DeleteVLANResponse
	(*ConfigureIPRequest)(nil),     // 4: vlan.ConfigureIPRequest
	(*ConfigureIPResponse)(nil),    // 5: vlan.ConfigureIPResponse
	(*AddRouteRequest)(nil),        // 6: vlan.AddRouteRequest
	(*AddRouteResponse)(nil),       // 7: vlan.AddRouteResponse
	(*DeleteRouteRequest)(nil),     // 8: vlan.DeleteRouteRequest
	(*DeleteRouteResponse)(nil),    // 9: vlan.DeleteRouteResponse
	(*ListInterfacesRequest)(nil),  // 10: vlan.ListInterfacesRequest
	(*ListInterfacesResponse)(nil), // 11: vlan.ListInterfacesResponse
	(*NetworkInterface)(nil),       // 12: vlan.NetworkInterface
}
var file_proto_network_proto_depIdxs = []int32{
	12, // 0: vlan.ListInterfacesResponse.interfaces:type_name -> vlan.NetworkInterface
	0,  // 1: vlan.NetworkConfig.CreateVLAN:input_type -> vlan.CreateVLANRequest
	2,  // 2: vlan.NetworkConfig.DeleteVLAN:input_type -> vlan.DeleteVLANRequest
	4,  // 3: vlan.NetworkConfig.ConfigureIP:input_type -> vlan.ConfigureIPRequest
	6,  // 4: vlan.NetworkConfig.AddRoute:input_type -> vlan.AddRouteRequest
	8,  // 5: vlan.NetworkConfig.DeleteRoute:input_type -> vlan.DeleteRouteRequest
	10, // 6: vlan.NetworkConfig.ListInterfaces:input_type -> vlan.ListInterfacesRequest
	1,  // 7: vlan.NetworkConfig.CreateVLAN:output_type -> vlan.CreateVLANResponse
	3,  // 8: vlan.NetworkConfig.DeleteVLAN:output_type -> vlan.DeleteVLANResponse
	5,  // 9: vlan.NetworkConfig.ConfigureIP:output_type -> vlan.ConfigureIPResponse
	7,  // 10: vlan.NetworkConfig.AddRoute:output_type -> vlan.AddRouteResponse
	9,  // 11: vlan.NetworkConfig.DeleteRoute:output_type -> vlan.DeleteRouteResponse
	11, // 12: vlan.NetworkConfig.ListInterfaces:output_type -> vlan.ListInterfacesResponse
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_proto_network_proto_init() }
func file_proto_network_proto_init() {
	if File_proto_network_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_network_proto_rawDesc), len(file_proto_network_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_network_proto_goTypes,
		DependencyIndexes: file_proto_network_proto_depIdxs,
		MessageInfos:      file_proto_network_proto_msgTypes,
	}.Build()
	File_proto_network_proto = out.File
	file_proto_network_proto_goTypes = nil
	file_proto_network_proto_depIdxs = nil
}
