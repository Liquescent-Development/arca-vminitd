syntax = "proto3";

package vlan;

option go_package = "github.com/Liquescent-Development/arca-vminitd/vminitd/extensions/vlan-service/proto";

// NetworkConfig service provides VLAN configuration for containers
// This service runs inside vminitd (PID 1) in each container VM
// It's accessible via vsock using Container.dial() from the Arca daemon
service NetworkConfig {
  // CreateVLAN creates a VLAN subinterface on a parent interface
  // Example: Creates eth0.100 from eth0 with VLAN ID 100
  rpc CreateVLAN(CreateVLANRequest) returns (CreateVLANResponse);

  // DeleteVLAN removes a VLAN subinterface
  rpc DeleteVLAN(DeleteVLANRequest) returns (DeleteVLANResponse);

  // ConfigureIP adds or updates an IP address on an interface
  rpc ConfigureIP(ConfigureIPRequest) returns (ConfigureIPResponse);

  // AddRoute adds a route to the routing table
  rpc AddRoute(AddRouteRequest) returns (AddRouteResponse);

  // DeleteRoute removes a route from the routing table
  rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse);

  // ListInterfaces lists all network interfaces
  rpc ListInterfaces(ListInterfacesRequest) returns (ListInterfacesResponse);
}

message CreateVLANRequest {
  // Parent interface name (e.g., "eth0")
  string parent_interface = 1;

  // VLAN ID (1-4094)
  uint32 vlan_id = 2;

  // IP address with CIDR notation (e.g., "172.18.0.5/16")
  // If empty, no IP is configured
  string ip_address = 3;

  // Gateway IP address (e.g., "172.18.0.1")
  // If empty, no default route is added
  string gateway = 4;

  // Optional: Custom MAC address for the VLAN interface
  // If empty, inherits parent's MAC
  string mac_address = 5;

  // Optional: MTU for the VLAN interface
  // If 0, uses parent's MTU
  uint32 mtu = 6;
}

message CreateVLANResponse {
  // Success status
  bool success = 1;

  // Created interface name (e.g., "eth0.100")
  string interface_name = 2;

  // Error message if success = false
  string error = 3;

  // Actual MAC address assigned
  string mac_address = 4;
}

message DeleteVLANRequest {
  // Interface name to delete (e.g., "eth0.100")
  string interface_name = 1;
}

message DeleteVLANResponse {
  // Success status
  bool success = 1;

  // Error message if success = false
  string error = 2;
}

message ConfigureIPRequest {
  // Interface name (e.g., "eth0.100")
  string interface_name = 1;

  // IP address with CIDR notation (e.g., "172.18.0.5/16")
  string ip_address = 2;

  // If true, replaces all existing IPs on the interface
  // If false, adds to existing IPs
  bool replace = 3;
}

message ConfigureIPResponse {
  // Success status
  bool success = 1;

  // Error message if success = false
  string error = 2;
}

message AddRouteRequest {
  // Destination network in CIDR notation (e.g., "0.0.0.0/0" for default route)
  // Empty string means default route
  string destination = 1;

  // Gateway IP address
  string gateway = 2;

  // Interface name to route through (e.g., "eth0.100")
  string interface_name = 3;

  // Route metric/priority (lower = higher priority)
  // 0 = use system default
  uint32 metric = 4;
}

message AddRouteResponse {
  // Success status
  bool success = 1;

  // Error message if success = false
  string error = 2;
}

message DeleteRouteRequest {
  // Destination network in CIDR notation
  string destination = 1;

  // Gateway IP address (optional, for matching specific route)
  string gateway = 2;

  // Interface name (optional, for matching specific route)
  string interface_name = 3;
}

message DeleteRouteResponse {
  // Success status
  bool success = 1;

  // Error message if success = false
  string error = 2;
}

message ListInterfacesRequest {
  // Optional: Filter by interface name pattern
  string name_filter = 1;
}

message ListInterfacesResponse {
  // List of network interfaces
  repeated NetworkInterface interfaces = 1;

  // Error message if retrieval failed
  string error = 2;
}

message NetworkInterface {
  // Interface name (e.g., "eth0", "eth0.100")
  string name = 1;

  // Interface index
  int32 index = 2;

  // MAC address
  string mac_address = 3;

  // MTU
  uint32 mtu = 4;

  // List of IP addresses (CIDR notation)
  repeated string ip_addresses = 5;

  // Interface state (up/down)
  bool is_up = 6;

  // Parent interface for VLANs (empty if not a VLAN)
  string parent = 7;

  // VLAN ID (0 if not a VLAN)
  uint32 vlan_id = 8;
}
