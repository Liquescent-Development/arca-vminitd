//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/network.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// NetworkConfig service provides VLAN configuration for containers
/// This service runs inside vminitd (PID 1) in each container VM
/// It's accessible via vsock using Container.dial() from the Arca daemon
///
/// Usage: instantiate `Vlan_NetworkConfigClient`, then call methods of this protocol to make API calls.
internal protocol Vlan_NetworkConfigClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? { get }

  func createVLAN(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse>

  func deleteVLAN(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse>

  func configureIP(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse>

  func addRoute(
    _ request: Vlan_AddRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_AddRouteRequest, Vlan_AddRouteResponse>

  func deleteRoute(
    _ request: Vlan_DeleteRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse>

  func listInterfaces(
    _ request: Vlan_ListInterfacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse>
}

extension Vlan_NetworkConfigClientProtocol {
  internal var serviceName: String {
    return "vlan.NetworkConfig"
  }

  /// CreateVLAN creates a VLAN subinterface on a parent interface
  /// Example: Creates eth0.100 from eth0 with VLAN ID 100
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVLAN.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createVLAN(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.createVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVLANInterceptors() ?? []
    )
  }

  /// DeleteVLAN removes a VLAN subinterface
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVLAN.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteVLAN(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteVLANInterceptors() ?? []
    )
  }

  /// ConfigureIP adds or updates an IP address on an interface
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigureIP.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func configureIP(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.configureIP.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureIPInterceptors() ?? []
    )
  }

  /// AddRoute adds a route to the routing table
  ///
  /// - Parameters:
  ///   - request: Request to send to AddRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addRoute(
    _ request: Vlan_AddRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_AddRouteRequest, Vlan_AddRouteResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.addRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRouteInterceptors() ?? []
    )
  }

  /// DeleteRoute removes a route from the routing table
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteRoute(
    _ request: Vlan_DeleteRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRouteInterceptors() ?? []
    )
  }

  /// ListInterfaces lists all network interfaces
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInterfaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listInterfaces(
    _ request: Vlan_ListInterfacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse> {
    return self.makeUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.listInterfaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterfacesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Vlan_NetworkConfigClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Vlan_NetworkConfigNIOClient")
internal final class Vlan_NetworkConfigClient: Vlan_NetworkConfigClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the vlan.NetworkConfig service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Vlan_NetworkConfigNIOClient: Vlan_NetworkConfigClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol?

  /// Creates a client for the vlan.NetworkConfig service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// NetworkConfig service provides VLAN configuration for containers
/// This service runs inside vminitd (PID 1) in each container VM
/// It's accessible via vsock using Container.dial() from the Arca daemon
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vlan_NetworkConfigAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? { get }

  func makeCreateVlanCall(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse>

  func makeDeleteVlanCall(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse>

  func makeConfigureIpCall(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse>

  func makeAddRouteCall(
    _ request: Vlan_AddRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_AddRouteRequest, Vlan_AddRouteResponse>

  func makeDeleteRouteCall(
    _ request: Vlan_DeleteRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse>

  func makeListInterfacesCall(
    _ request: Vlan_ListInterfacesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vlan_NetworkConfigAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vlan_NetworkConfigClientMetadata.serviceDescriptor
  }

  internal var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateVlanCall(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.createVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVLANInterceptors() ?? []
    )
  }

  internal func makeCreateVLANCall(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse> {
    return self.makeCreateVlanCall(
      request,
      callOptions: callOptions
    )
  }

  internal func makeDeleteVlanCall(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteVLANInterceptors() ?? []
    )
  }

  internal func makeDeleteVLANCall(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse> {
    return self.makeDeleteVlanCall(
      request,
      callOptions: callOptions
    )
  }

  internal func makeConfigureIpCall(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.configureIP.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureIPInterceptors() ?? []
    )
  }

  internal func makeConfigureIPCall(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse> {
    return self.makeConfigureIpCall(
      request,
      callOptions: callOptions
    )
  }

  internal func makeAddRouteCall(
    _ request: Vlan_AddRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_AddRouteRequest, Vlan_AddRouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.addRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRouteInterceptors() ?? []
    )
  }

  internal func makeDeleteRouteCall(
    _ request: Vlan_DeleteRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRouteInterceptors() ?? []
    )
  }

  internal func makeListInterfacesCall(
    _ request: Vlan_ListInterfacesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse> {
    return self.makeAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.listInterfaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterfacesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vlan_NetworkConfigAsyncClientProtocol {
  internal func createVLAN(
    _ request: Vlan_CreateVLANRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_CreateVLANResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.createVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVLANInterceptors() ?? []
    )
  }

  internal func deleteVLAN(
    _ request: Vlan_DeleteVLANRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_DeleteVLANResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteVLAN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteVLANInterceptors() ?? []
    )
  }

  internal func configureIP(
    _ request: Vlan_ConfigureIPRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_ConfigureIPResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.configureIP.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureIPInterceptors() ?? []
    )
  }

  internal func addRoute(
    _ request: Vlan_AddRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_AddRouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.addRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRouteInterceptors() ?? []
    )
  }

  internal func deleteRoute(
    _ request: Vlan_DeleteRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_DeleteRouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.deleteRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRouteInterceptors() ?? []
    )
  }

  internal func listInterfaces(
    _ request: Vlan_ListInterfacesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vlan_ListInterfacesResponse {
    return try await self.performAsyncUnaryCall(
      path: Vlan_NetworkConfigClientMetadata.Methods.listInterfaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterfacesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Vlan_NetworkConfigAsyncClient: Vlan_NetworkConfigAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vlan_NetworkConfigClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Vlan_NetworkConfigClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createVLAN'.
  func makeCreateVLANInterceptors() -> [ClientInterceptor<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteVLAN'.
  func makeDeleteVLANInterceptors() -> [ClientInterceptor<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse>]

  /// - Returns: Interceptors to use when invoking 'configureIP'.
  func makeConfigureIPInterceptors() -> [ClientInterceptor<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse>]

  /// - Returns: Interceptors to use when invoking 'addRoute'.
  func makeAddRouteInterceptors() -> [ClientInterceptor<Vlan_AddRouteRequest, Vlan_AddRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteRoute'.
  func makeDeleteRouteInterceptors() -> [ClientInterceptor<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'listInterfaces'.
  func makeListInterfacesInterceptors() -> [ClientInterceptor<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse>]
}

internal enum Vlan_NetworkConfigClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkConfig",
    fullName: "vlan.NetworkConfig",
    methods: [
      Vlan_NetworkConfigClientMetadata.Methods.createVLAN,
      Vlan_NetworkConfigClientMetadata.Methods.deleteVLAN,
      Vlan_NetworkConfigClientMetadata.Methods.configureIP,
      Vlan_NetworkConfigClientMetadata.Methods.addRoute,
      Vlan_NetworkConfigClientMetadata.Methods.deleteRoute,
      Vlan_NetworkConfigClientMetadata.Methods.listInterfaces,
    ]
  )

  internal enum Methods {
    internal static let createVLAN = GRPCMethodDescriptor(
      name: "CreateVLAN",
      path: "/vlan.NetworkConfig/CreateVLAN",
      type: GRPCCallType.unary
    )

    internal static let deleteVLAN = GRPCMethodDescriptor(
      name: "DeleteVLAN",
      path: "/vlan.NetworkConfig/DeleteVLAN",
      type: GRPCCallType.unary
    )

    internal static let configureIP = GRPCMethodDescriptor(
      name: "ConfigureIP",
      path: "/vlan.NetworkConfig/ConfigureIP",
      type: GRPCCallType.unary
    )

    internal static let addRoute = GRPCMethodDescriptor(
      name: "AddRoute",
      path: "/vlan.NetworkConfig/AddRoute",
      type: GRPCCallType.unary
    )

    internal static let deleteRoute = GRPCMethodDescriptor(
      name: "DeleteRoute",
      path: "/vlan.NetworkConfig/DeleteRoute",
      type: GRPCCallType.unary
    )

    internal static let listInterfaces = GRPCMethodDescriptor(
      name: "ListInterfaces",
      path: "/vlan.NetworkConfig/ListInterfaces",
      type: GRPCCallType.unary
    )
  }
}

/// NetworkConfig service provides VLAN configuration for containers
/// This service runs inside vminitd (PID 1) in each container VM
/// It's accessible via vsock using Container.dial() from the Arca daemon
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Vlan_NetworkConfigProvider: CallHandlerProvider {
  var interceptors: Vlan_NetworkConfigServerInterceptorFactoryProtocol? { get }

  /// CreateVLAN creates a VLAN subinterface on a parent interface
  /// Example: Creates eth0.100 from eth0 with VLAN ID 100
  func createVLAN(request: Vlan_CreateVLANRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_CreateVLANResponse>

  /// DeleteVLAN removes a VLAN subinterface
  func deleteVLAN(request: Vlan_DeleteVLANRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_DeleteVLANResponse>

  /// ConfigureIP adds or updates an IP address on an interface
  func configureIP(request: Vlan_ConfigureIPRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_ConfigureIPResponse>

  /// AddRoute adds a route to the routing table
  func addRoute(request: Vlan_AddRouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_AddRouteResponse>

  /// DeleteRoute removes a route from the routing table
  func deleteRoute(request: Vlan_DeleteRouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_DeleteRouteResponse>

  /// ListInterfaces lists all network interfaces
  func listInterfaces(request: Vlan_ListInterfacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vlan_ListInterfacesResponse>
}

extension Vlan_NetworkConfigProvider {
  internal var serviceName: Substring {
    return Vlan_NetworkConfigServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateVLAN":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_CreateVLANRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_CreateVLANResponse>(),
        interceptors: self.interceptors?.makeCreateVLANInterceptors() ?? [],
        userFunction: self.createVLAN(request:context:)
      )

    case "DeleteVLAN":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_DeleteVLANRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_DeleteVLANResponse>(),
        interceptors: self.interceptors?.makeDeleteVLANInterceptors() ?? [],
        userFunction: self.deleteVLAN(request:context:)
      )

    case "ConfigureIP":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_ConfigureIPRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_ConfigureIPResponse>(),
        interceptors: self.interceptors?.makeConfigureIPInterceptors() ?? [],
        userFunction: self.configureIP(request:context:)
      )

    case "AddRoute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_AddRouteRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_AddRouteResponse>(),
        interceptors: self.interceptors?.makeAddRouteInterceptors() ?? [],
        userFunction: self.addRoute(request:context:)
      )

    case "DeleteRoute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_DeleteRouteRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_DeleteRouteResponse>(),
        interceptors: self.interceptors?.makeDeleteRouteInterceptors() ?? [],
        userFunction: self.deleteRoute(request:context:)
      )

    case "ListInterfaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_ListInterfacesRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_ListInterfacesResponse>(),
        interceptors: self.interceptors?.makeListInterfacesInterceptors() ?? [],
        userFunction: self.listInterfaces(request:context:)
      )

    default:
      return nil
    }
  }
}

/// NetworkConfig service provides VLAN configuration for containers
/// This service runs inside vminitd (PID 1) in each container VM
/// It's accessible via vsock using Container.dial() from the Arca daemon
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vlan_NetworkConfigAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vlan_NetworkConfigServerInterceptorFactoryProtocol? { get }

  /// CreateVLAN creates a VLAN subinterface on a parent interface
  /// Example: Creates eth0.100 from eth0 with VLAN ID 100
  func createVLAN(
    request: Vlan_CreateVLANRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_CreateVLANResponse

  /// DeleteVLAN removes a VLAN subinterface
  func deleteVLAN(
    request: Vlan_DeleteVLANRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_DeleteVLANResponse

  /// ConfigureIP adds or updates an IP address on an interface
  func configureIP(
    request: Vlan_ConfigureIPRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_ConfigureIPResponse

  /// AddRoute adds a route to the routing table
  func addRoute(
    request: Vlan_AddRouteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_AddRouteResponse

  /// DeleteRoute removes a route from the routing table
  func deleteRoute(
    request: Vlan_DeleteRouteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_DeleteRouteResponse

  /// ListInterfaces lists all network interfaces
  func listInterfaces(
    request: Vlan_ListInterfacesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vlan_ListInterfacesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vlan_NetworkConfigAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vlan_NetworkConfigServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Vlan_NetworkConfigServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Vlan_NetworkConfigServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateVLAN":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_CreateVLANRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_CreateVLANResponse>(),
        interceptors: self.interceptors?.makeCreateVLANInterceptors() ?? [],
        wrapping: { try await self.createVLAN(request: $0, context: $1) }
      )

    case "DeleteVLAN":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_DeleteVLANRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_DeleteVLANResponse>(),
        interceptors: self.interceptors?.makeDeleteVLANInterceptors() ?? [],
        wrapping: { try await self.deleteVLAN(request: $0, context: $1) }
      )

    case "ConfigureIP":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_ConfigureIPRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_ConfigureIPResponse>(),
        interceptors: self.interceptors?.makeConfigureIPInterceptors() ?? [],
        wrapping: { try await self.configureIP(request: $0, context: $1) }
      )

    case "AddRoute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_AddRouteRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_AddRouteResponse>(),
        interceptors: self.interceptors?.makeAddRouteInterceptors() ?? [],
        wrapping: { try await self.addRoute(request: $0, context: $1) }
      )

    case "DeleteRoute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_DeleteRouteRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_DeleteRouteResponse>(),
        interceptors: self.interceptors?.makeDeleteRouteInterceptors() ?? [],
        wrapping: { try await self.deleteRoute(request: $0, context: $1) }
      )

    case "ListInterfaces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vlan_ListInterfacesRequest>(),
        responseSerializer: ProtobufSerializer<Vlan_ListInterfacesResponse>(),
        interceptors: self.interceptors?.makeListInterfacesInterceptors() ?? [],
        wrapping: { try await self.listInterfaces(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Vlan_NetworkConfigServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createVLAN'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateVLANInterceptors() -> [ServerInterceptor<Vlan_CreateVLANRequest, Vlan_CreateVLANResponse>]

  /// - Returns: Interceptors to use when handling 'deleteVLAN'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteVLANInterceptors() -> [ServerInterceptor<Vlan_DeleteVLANRequest, Vlan_DeleteVLANResponse>]

  /// - Returns: Interceptors to use when handling 'configureIP'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigureIPInterceptors() -> [ServerInterceptor<Vlan_ConfigureIPRequest, Vlan_ConfigureIPResponse>]

  /// - Returns: Interceptors to use when handling 'addRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddRouteInterceptors() -> [ServerInterceptor<Vlan_AddRouteRequest, Vlan_AddRouteResponse>]

  /// - Returns: Interceptors to use when handling 'deleteRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteRouteInterceptors() -> [ServerInterceptor<Vlan_DeleteRouteRequest, Vlan_DeleteRouteResponse>]

  /// - Returns: Interceptors to use when handling 'listInterfaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterfacesInterceptors() -> [ServerInterceptor<Vlan_ListInterfacesRequest, Vlan_ListInterfacesResponse>]
}

internal enum Vlan_NetworkConfigServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkConfig",
    fullName: "vlan.NetworkConfig",
    methods: [
      Vlan_NetworkConfigServerMetadata.Methods.createVLAN,
      Vlan_NetworkConfigServerMetadata.Methods.deleteVLAN,
      Vlan_NetworkConfigServerMetadata.Methods.configureIP,
      Vlan_NetworkConfigServerMetadata.Methods.addRoute,
      Vlan_NetworkConfigServerMetadata.Methods.deleteRoute,
      Vlan_NetworkConfigServerMetadata.Methods.listInterfaces,
    ]
  )

  internal enum Methods {
    internal static let createVLAN = GRPCMethodDescriptor(
      name: "CreateVLAN",
      path: "/vlan.NetworkConfig/CreateVLAN",
      type: GRPCCallType.unary
    )

    internal static let deleteVLAN = GRPCMethodDescriptor(
      name: "DeleteVLAN",
      path: "/vlan.NetworkConfig/DeleteVLAN",
      type: GRPCCallType.unary
    )

    internal static let configureIP = GRPCMethodDescriptor(
      name: "ConfigureIP",
      path: "/vlan.NetworkConfig/ConfigureIP",
      type: GRPCCallType.unary
    )

    internal static let addRoute = GRPCMethodDescriptor(
      name: "AddRoute",
      path: "/vlan.NetworkConfig/AddRoute",
      type: GRPCCallType.unary
    )

    internal static let deleteRoute = GRPCMethodDescriptor(
      name: "DeleteRoute",
      path: "/vlan.NetworkConfig/DeleteRoute",
      type: GRPCCallType.unary
    )

    internal static let listInterfaces = GRPCMethodDescriptor(
      name: "ListInterfaces",
      path: "/vlan.NetworkConfig/ListInterfaces",
      type: GRPCCallType.unary
    )
  }
}
