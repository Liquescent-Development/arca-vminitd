// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: network.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkConfig_CreateVLAN_FullMethodName     = "/vlan.NetworkConfig/CreateVLAN"
	NetworkConfig_DeleteVLAN_FullMethodName     = "/vlan.NetworkConfig/DeleteVLAN"
	NetworkConfig_ConfigureIP_FullMethodName    = "/vlan.NetworkConfig/ConfigureIP"
	NetworkConfig_AddRoute_FullMethodName       = "/vlan.NetworkConfig/AddRoute"
	NetworkConfig_DeleteRoute_FullMethodName    = "/vlan.NetworkConfig/DeleteRoute"
	NetworkConfig_ListInterfaces_FullMethodName = "/vlan.NetworkConfig/ListInterfaces"
)

// NetworkConfigClient is the client API for NetworkConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NetworkConfig service provides VLAN configuration for containers
// This service runs inside vminitd (PID 1) in each container VM
// It's accessible via vsock using Container.dial() from the Arca daemon
type NetworkConfigClient interface {
	// CreateVLAN creates a VLAN subinterface on a parent interface
	// Example: Creates eth0.100 from eth0 with VLAN ID 100
	CreateVLAN(ctx context.Context, in *CreateVLANRequest, opts ...grpc.CallOption) (*CreateVLANResponse, error)
	// DeleteVLAN removes a VLAN subinterface
	DeleteVLAN(ctx context.Context, in *DeleteVLANRequest, opts ...grpc.CallOption) (*DeleteVLANResponse, error)
	// ConfigureIP adds or updates an IP address on an interface
	ConfigureIP(ctx context.Context, in *ConfigureIPRequest, opts ...grpc.CallOption) (*ConfigureIPResponse, error)
	// AddRoute adds a route to the routing table
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error)
	// DeleteRoute removes a route from the routing table
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	// ListInterfaces lists all network interfaces
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
}

type networkConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkConfigClient(cc grpc.ClientConnInterface) NetworkConfigClient {
	return &networkConfigClient{cc}
}

func (c *networkConfigClient) CreateVLAN(ctx context.Context, in *CreateVLANRequest, opts ...grpc.CallOption) (*CreateVLANResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVLANResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_CreateVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) DeleteVLAN(ctx context.Context, in *DeleteVLANRequest, opts ...grpc.CallOption) (*DeleteVLANResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVLANResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_DeleteVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) ConfigureIP(ctx context.Context, in *ConfigureIPRequest, opts ...grpc.CallOption) (*ConfigureIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureIPResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_ConfigureIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRouteResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_AddRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, NetworkConfig_ListInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkConfigServer is the server API for NetworkConfig service.
// All implementations must embed UnimplementedNetworkConfigServer
// for forward compatibility.
//
// NetworkConfig service provides VLAN configuration for containers
// This service runs inside vminitd (PID 1) in each container VM
// It's accessible via vsock using Container.dial() from the Arca daemon
type NetworkConfigServer interface {
	// CreateVLAN creates a VLAN subinterface on a parent interface
	// Example: Creates eth0.100 from eth0 with VLAN ID 100
	CreateVLAN(context.Context, *CreateVLANRequest) (*CreateVLANResponse, error)
	// DeleteVLAN removes a VLAN subinterface
	DeleteVLAN(context.Context, *DeleteVLANRequest) (*DeleteVLANResponse, error)
	// ConfigureIP adds or updates an IP address on an interface
	ConfigureIP(context.Context, *ConfigureIPRequest) (*ConfigureIPResponse, error)
	// AddRoute adds a route to the routing table
	AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error)
	// DeleteRoute removes a route from the routing table
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	// ListInterfaces lists all network interfaces
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	mustEmbedUnimplementedNetworkConfigServer()
}

// UnimplementedNetworkConfigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkConfigServer struct{}

func (UnimplementedNetworkConfigServer) CreateVLAN(context.Context, *CreateVLANRequest) (*CreateVLANResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVLAN not implemented")
}
func (UnimplementedNetworkConfigServer) DeleteVLAN(context.Context, *DeleteVLANRequest) (*DeleteVLANResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVLAN not implemented")
}
func (UnimplementedNetworkConfigServer) ConfigureIP(context.Context, *ConfigureIPRequest) (*ConfigureIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureIP not implemented")
}
func (UnimplementedNetworkConfigServer) AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedNetworkConfigServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedNetworkConfigServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedNetworkConfigServer) mustEmbedUnimplementedNetworkConfigServer() {}
func (UnimplementedNetworkConfigServer) testEmbeddedByValue()                       {}

// UnsafeNetworkConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkConfigServer will
// result in compilation errors.
type UnsafeNetworkConfigServer interface {
	mustEmbedUnimplementedNetworkConfigServer()
}

func RegisterNetworkConfigServer(s grpc.ServiceRegistrar, srv NetworkConfigServer) {
	// If the following call pancis, it indicates UnimplementedNetworkConfigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkConfig_ServiceDesc, srv)
}

func _NetworkConfig_CreateVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).CreateVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_CreateVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).CreateVLAN(ctx, req.(*CreateVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_DeleteVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).DeleteVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_DeleteVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).DeleteVLAN(ctx, req.(*DeleteVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_ConfigureIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).ConfigureIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_ConfigureIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).ConfigureIP(ctx, req.(*ConfigureIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_AddRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_ListInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkConfig_ServiceDesc is the grpc.ServiceDesc for NetworkConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vlan.NetworkConfig",
	HandlerType: (*NetworkConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVLAN",
			Handler:    _NetworkConfig_CreateVLAN_Handler,
		},
		{
			MethodName: "DeleteVLAN",
			Handler:    _NetworkConfig_DeleteVLAN_Handler,
		},
		{
			MethodName: "ConfigureIP",
			Handler:    _NetworkConfig_ConfigureIP_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _NetworkConfig_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _NetworkConfig_DeleteRoute_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _NetworkConfig_ListInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
